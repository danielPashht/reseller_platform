version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: reseller_postgresql
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PORT: ${DB_PORT}
    volumes:
      - .bot/db/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5433:5432"
    networks:
      - reseller_network

  rabbitmq:
    image: rabbitmq:management
    container_name: reseller_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - reseller_network

  redis:
    image: redis:latest
    container_name: reseller_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - reseller_network

  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    container_name: reseller_backend
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: reseller_rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      ADMIN_SECRET: ${ADMIN_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - reseller_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://reseller_backend:8080/items/"]
      interval: 10s
      timeout: 5s
      retries: 3

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: reseller_bot
    environment:
      RABBITMQ_HOST: reseller_rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      REDIS_HOST: reseller_redis
      REDIS_PORT: ${REDIS_PORT}
      ADMIN_API_URL: ${ADMIN_API_URL}
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_API_KEY: ${TG_SECRET}
      MANAGER_USER_ID: ${MANAGER_USER_ID}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      web:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reseller_network

networks:
  reseller_network:
    driver: bridge